<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React基础配置</title>
      <link href="/2022/04/08/react-ji-chu-pei-zhi/"/>
      <url>/2022/04/08/react-ji-chu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建React项目"><a href="#搭建React项目" class="headerlink" title="搭建React项目"></a>搭建React项目</h1><pre class="line-numbers language-none"><code class="language-none">npx create-react-app my-app cd my-appnpm install npm start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="React设计理念"><a href="#React设计理念" class="headerlink" title="React设计理念"></a>React设计理念</h2><ul><li><strong>单向数据流</strong><ul><li>数据与界面绑定</li><li>单向渲染</li></ul></li><li><strong>虚拟dom</strong><ul><li>如果真实的UI需要更新，对比需要更新的UI，以最小的代价更新UI的元素。<br><img src="https://choichoi-1310042158.cos.ap-singapore.myqcloud.com/20220408173032.png"></li></ul></li><li><strong>组件化</strong><ul><li>一个项目是由无数个独立的组件互相搭配组合起来的。</li><li>能保持交互一致性</li><li>保持视觉风格的统一</li><li>便于程序员之间互相协作。</li></ul></li></ul><h1 id="TypeScript-React"><a href="#TypeScript-React" class="headerlink" title="TypeScript+React"></a>TypeScript+React</h1><pre class="line-numbers language-none"><code class="language-none">npx create-react-app my-app-ts --template typescript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>ts无法被主流的浏览器识别，需要编译器进行编译。</li><li>create-react-app默认有”babel-loader”编译器。</li><li>编译器配置文件: tsconfig.json</li></ul><h2 id="TypeScript编译流程"><a href="#TypeScript编译流程" class="headerlink" title="TypeScript编译流程"></a>TypeScript编译流程</h2><ul><li><code> npm run eject</code></li><li>项目根目录中会多”config”,”scripts”文件夹。</li><li>config下的webpack.config.js文件是项目的配置核心。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//核心</span><span class="token keyword">const</span> useTypeScript <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>paths<span class="token punctuation">.</span>appTsConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">{</span>     test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(js|mjs)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>    exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">@babel(?:\/|\\{1,2})runtime</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>    loader<span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'babel-loader'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实际上create出来的react网站也是基于webpack的网站，create-react-app帮忙做了脚手架封装。</li><li>如何<strong>将一个现有的js项目改为ts项目</strong>？</li><li>进入项目根目录后，运行: <code>npm install --save typescript @types/node @types/react @types/react-dom @types/jest</code></li></ul><h1 id="React基础"><a href="#React基础" class="headerlink" title="React基础"></a>React基础</h1><h2 id="React函数式组件"><a href="#React函数式组件" class="headerlink" title="React函数式组件"></a>React函数式组件</h2><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2022/04/05/typescript/"/>
      <url>/2022/04/05/typescript/</url>
      
        <content type="html"><![CDATA[<blockquote><p>正在持续更新</p></blockquote><h1 id="TypeScript学习"><a href="#TypeScript学习" class="headerlink" title="TypeScript学习"></a>TypeScript学习</h1><h2 id="TypeScript环境配置"><a href="#TypeScript环境配置" class="headerlink" title="TypeScript环境配置"></a>TypeScript环境配置</h2><ul><li>电脑全局安装：<code>npm install -g typescript</code><ul><li>检查是否安装和安装的版本 <code>tsc -v</code></li></ul></li><li>也需要安装Node.js </li></ul><h2 id="TypeScript运行"><a href="#TypeScript运行" class="headerlink" title="TypeScript运行"></a>TypeScript运行</h2><ul><li>新建一个main.ts文件，输入:<ul><li><img src="https://choichoi-1310042158.cos.ap-singapore.myqcloud.com/20220405163617.png"></li></ul></li><li>在terminal中将.ts文件编译成.js文件<ul><li><code>tsc main.ts </code></li></ul></li><li>然后运行<ul><li><code>node main.js</code> </li></ul></li><li>就可以在teminal中看到”hello world”了<ul><li>为什么.js文件没有编译就能运行？</li><li>因为NodeJS原生支持TypeScript。<ul><li>可以直接用<code>node main.ts</code>运行.ts文件</li></ul></li></ul></li></ul><h2 id="TypeScript工作流"><a href="#TypeScript工作流" class="headerlink" title="TypeScript工作流"></a>TypeScript工作流</h2><ul><li>写好ts代码以后，要用ts的编译器把.ts文件编译为.js文件，然后又浏览器调用并且执行.js文件。</li><li>ts的编译器就叫做TSC。</li><li>为什么需要TSC编译？<ul><li>因为大部分主流浏览器还不支持TypeScript.</li></ul></li></ul><h2 id="TypeScript-demo项目依赖"><a href="#TypeScript-demo项目依赖" class="headerlink" title="TypeScript demo项目依赖"></a>TypeScript demo项目依赖</h2><ol><li><code>npm init</code></li><li><code>npm i --save-dev lite-server</code></li></ol><ul><li>lite-server是用来开发的轻量级服务器。</li><li>package.json中的”devDependencies”和”dependencies”区别<ul><li>devDependencies是参与项目开发，项目开发完成上线并不需要打包部署到服务器中。</li><li>dependencies下所有的依赖都会被打包放到服务器上。</li><li>区分的好处：有效降低网站大小，缩短用户打 开网站的时间。</li></ul></li></ul><ol start="3"><li>添加”start”: “lite-server”到package.json中的script下。<ol><li>可以自动部署在localhost:3000。</li></ol></li></ol><h2 id="TypeScript-基础"><a href="#TypeScript-基础" class="headerlink" title="TypeScript 基础"></a>TypeScript 基础</h2><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><ul><li>通常用let。<ul><li>使用var的坏处：<ul><li>只有全局作用域和函数作用域，没有块级作用域。而且可以多次声明相同的变量。</li></ul></li><li>let就是用来解决var所带来的的问题。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment">// 跳出for循环之后，i还是存在。i=5。</span><span class="token comment">// 使用let可以解决这个问题，会立马报错。</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"finally i = "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="TypeScript的基本类型"><a href="#TypeScript的基本类型" class="headerlink" title="TypeScript的基本类型"></a>TypeScript的基本类型</h3><ul><li><p>常见的：boolean, string, number, array, null, undefined, object.</p></li><li><p>不常见的：tuple, enum, void, never, any.</p></li><li><p>常见高级类型：</p><ul><li>Union 联合类型</li><li>Nullable 可空类型</li><li>Literal 预定义类型</li></ul></li></ul><h4 id="Number-String-Boolean"><a href="#Number-String-Boolean" class="headerlink" title="Number, String, Boolean"></a>Number, String, Boolean</h4><h5 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h5><ul><li>既能表示整数，也能表示浮点数或者正负数。</li></ul><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><ul><li>“hello”, ‘hello’, `hello`</li><li>反引号：``，可以创建一个字符串模板。</li></ul><h5 id="Boolean-布尔类型"><a href="#Boolean-布尔类型" class="headerlink" title="Boolean 布尔类型"></a>Boolean 布尔类型</h5><ul><li>真、假</li><li>处理逻辑判断</li></ul><h5 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h5>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 限定传进来的数据类型为number <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token operator">:</span> number<span class="token punctuation">,</span> n2<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>number1<span class="token punctuation">,</span> number2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 类型限制可以自动映射 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token keyword">let</span> isTrue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>isTrue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span> <span class="token comment">//会报错</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 或者手动限制类型 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token keyword">let</span> isTrue<span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>isTrue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span> <span class="token comment">//会报错</span><span class="token keyword">let</span> str<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Array-Tuple"><a href="#Array-Tuple" class="headerlink" title="Array, Tuple"></a>Array, Tuple</h4><h5 id="Array-数组类型"><a href="#Array-数组类型" class="headerlink" title="Array 数组类型"></a>Array 数组类型</h5><ul><li>[]</li><li>可以存放任意类型的数据。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 标准写法</span><span class="token keyword">let</span> list1<span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 泛型</span><span class="token keyword">let</span> list2<span class="token operator">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 不写类型的偷懒写法</span><span class="token keyword">let</span> list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 显示类型：let list4: (string | number)[]</span><span class="token keyword">let</span> list4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 显示类型: let list5: any</span><span class="token keyword">let</span> list5<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 不同：list4只能存放string和number， list5存放任何类型的数据。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="Tuple-元祖类型"><a href="#Tuple-元祖类型" class="headerlink" title="Tuple 元祖类型"></a>Tuple 元祖类型</h5><ul><li>特殊的数组。是<strong>固定长度，固定类型的数组</strong>。</li><li>只有<strong>声明时同时指定了变量类型</strong>才是tuple元祖。<ul><li>没有指定类型就是普通的array。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> person1<span class="token operator">:</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> string<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">]</span><span class="token comment">///下面都会报错</span>person1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ddd"</span>person1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>person1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>需要注意：元祖现在还有bug。<ul><li>push()可以无限拓宽元祖的长度。<pre class="line-numbers language-js" data-language="js"><code class="language-js">person1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment">//会报错，但如果利用push()则不会报错，还能通过编译。</span>person1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="Union-Literal"><a href="#Union-Literal" class="headerlink" title="Union, Literal"></a>Union, Literal</h4><h5 id="Union联合类型"><a href="#Union联合类型" class="headerlink" title="Union联合类型"></a>Union联合类型</h5><ul><li>可以同时支持两个或者几个不同的类型。类型之间用 | 进行分隔，<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> union <span class="token operator">:</span> string <span class="token operator">|</span> number union <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>union <span class="token operator">=</span> <span class="token string">"dddd"</span><span class="token punctuation">;</span><span class="token keyword">let</span> union2 <span class="token operator">:</span> number <span class="token operator">|</span> string <span class="token operator">|</span> boolean <span class="token operator">|</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token operator">:</span> number <span class="token operator">|</span> string<span class="token punctuation">,</span> n2<span class="token operator">:</span> number <span class="token operator">|</span> string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> n1 <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> n2 <span class="token operator">===</span> "string“<span class="token punctuation">)</span>    <span class="token keyword">return</span> n1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> n2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">}</span><span class="token keyword">let</span> mergeNumber <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//7</span><span class="token keyword">let</span> mergeString <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="Literal字面量类型"><a href="#Literal字面量类型" class="headerlink" title="Literal字面量类型"></a>Literal字面量类型</h5><ul><li>字面量是 JavaScript 本身提供的一个准确变量。</li><li>在声明类型的同时声明值，明确的取值数字的类型。<pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token comment">//如使用字符串字面量作为一个类型。</span>  <span class="token keyword">let</span> foo<span class="token operator">:</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span>  foo <span class="token operator">=</span> <span class="token string">'Bar'</span><span class="token punctuation">;</span> <span class="token comment">//会报错</span>    <span class="token comment">//确定了值只能为数字0,1,2的union。</span>  <span class="token keyword">let</span> union3<span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span>  union3 <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">//union3 = 4 //会报错</span>  <span class="token comment">//改写上面的union2</span>  <span class="token keyword">let</span> union2 <span class="token operator">:</span> number <span class="token operator">|</span> string <span class="token operator">|</span> boolean <span class="token operator">|</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>n1<span class="token operator">:</span> number <span class="token operator">|</span> string<span class="token punctuation">,</span> n2<span class="token operator">:</span> number <span class="token operator">|</span> string<span class="token punctuation">,</span> resultType<span class="token operator">:</span> <span class="token string">"as-number"</span> <span class="token operator">|</span> <span class="token string">"as-string"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//如果resultType是等于"as-string",不管n1和n2是什么类型，让结果输出为string。</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>resultType <span class="token operator">===</span> <span class="token string">"as-string"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> n1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> n2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> n1 <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> n2 <span class="token operator">===</span> "string“<span class="token punctuation">)</span>    <span class="token keyword">return</span> n1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> n2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">}</span>  <span class="token keyword">let</span> mergeNumber <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"as-number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//7</span>  <span class="token keyword">let</span> mergeNumber <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"as-string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//25</span>  <span class="token keyword">let</span> mergeString <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span><span class="token string">"as-string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h4><ul><li>枚举类型 <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">enum</span> Color<span class="token punctuation">{</span>  red<span class="token punctuation">,</span>  green<span class="token punctuation">,</span>  blue<span class="token punctuation">}</span> <span class="token keyword">let</span> color <span class="token operator">=</span> Color<span class="token punctuation">.</span>blueconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token comment">//同理，Color.red = 0, Color.green = 1</span><span class="token comment">//也可以自己定义值</span><span class="token keyword">enum</span> Color2<span class="token punctuation">{</span>  red <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>  green <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>  blue <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token comment">//也可以不是数字，混合string和数字进行处理</span><span class="token keyword">enum</span> Color3<span class="token punctuation">{</span>  red <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">,</span>  green <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">,</span>  blue <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color3<span class="token punctuation">)</span> <span class="token comment">//输出"green"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="Any-Unknown"><a href="#Any-Unknown" class="headerlink" title="Any, Unknown"></a>Any, Unknown</h4><ul><li><p>any是一个动态类型，支持和兼容所有类型</p></li><li><p>在不知道用什么类型的时候可以用any。</p></li><li><p>在日常使用js的时候就是个any类型。 </p></li><li><p>js的灵活性带来的快速开发效率也给代码带来了不可阅读性，不可维护性，不可拓展性等一系列的问题。</p></li><li><p>any类型保留了高灵活性同时带来了强类型语言才有的高可维护性。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> randonValue<span class="token operator">:</span> any <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>randomValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>randomValue <span class="token operator">=</span> <span class="token string">"dddd"</span><span class="token punctuation">;</span>randomValue <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">randomValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//编译执行到这里的时候会报错。</span>randomValue<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>unknown和any差不多，不能确定变量的类型，但是可以保证类型的安全。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">用法：将上面的代码略作修改<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> randomValue <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">randomValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> randomValue <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  randomValue<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如何选择？</p><ul><li>any适合代码的快速成型快速上线，但是会遗留下来一些安全隐患。</li><li>unknown就更保险一点。</li></ul></li></ul><h4 id="Void-Undefined-Never"><a href="#Void-Undefined-Never" class="headerlink" title="Void, Undefined, Never"></a>Void, Undefined, Never</h4><ul><li><p>Void:</p><ul><li>Void和Undefined区别就在于在探讨某个变量到底是否存在的哲学问题。</li><li>Undefined指的是变量没有赋值没有初始化。</li><li>Void指的是变量本身就不存在。</li><li>ts中，所有的void输出的都是undefined。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">printResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lalala"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">printResult</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//输出undefined</span><span class="token keyword">function</span> <span class="token function">printResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lalala"</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token comment">//一定要加return,否则会报错  </span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">printResult</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//输出undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>Never</strong></p><ul><li><strong>一个函数永远执行不完，就是Never的本质。</strong></li><li>用法：用来处理异常或者Promise</li><li>下面的函数本质上没有返回值。返回值的类型会显示”void”。</li><li>下面这个函数不仅没有返回值，还会抛出异常。也就是执行到”throw”的时候就会强行让该函数结束了。永远不会执行完成。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throwError</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token operator">:</span> string<span class="token punctuation">,</span> errorCode<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> never<span class="token punctuation">{</span>  <span class="token keyword">throw</span><span class="token punctuation">{</span>    message<span class="token punctuation">,</span>    errorCode  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">throwError</span><span class="token punctuation">(</span><span class="token string">"not found"</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>除了抛出异常以外，函数无法执行完成的方法：使用while循环。<pre class="line-numbers language-none"><code class="language-none">function whileLoop(): never{  while(true){    console.log("dddd")  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="TypeScript的面对对象"><a href="#TypeScript的面对对象" class="headerlink" title="TypeScript的面对对象"></a>TypeScript的面对对象</h3><h4 id="Object-对象类型"><a href="#Object-对象类型" class="headerlink" title="Object 对象类型"></a>Object 对象类型</h4><ul><li><p>js中使用花括号并且以键值类形式实现的数据，都属于对象类型。</p></li><li><p>但是ts更明确来说是key to type，键类型对。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  firstName <span class="token operator">:</span> <span class="token string">"choi"</span><span class="token punctuation">,</span>  lastName<span class="token operator">:</span> <span class="token string">"hot"</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>nickname<span class="token punctuation">)</span><span class="token comment">//调用没有定义的内部变量，js不会报错，但是ts会。</span><span class="token comment">//如果不怕麻烦可以这样定义：</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  firstName <span class="token operator">:</span> string<span class="token punctuation">,</span>  lastName<span class="token operator">:</span> string<span class="token punctuation">,</span>  age<span class="token operator">:</span> number<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  firstName <span class="token operator">:</span> <span class="token string">"choi"</span><span class="token punctuation">,</span>  lastName<span class="token operator">:</span> <span class="token string">"hot"</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>   笼统定义object类型不会对代码有任何帮助，ts实际上不知道对象内部结构。  指定了object类型相当于指定了一对空的花括号。  <span class="token keyword">const</span> person<span class="token operator">:</span> object 相当于 <span class="token keyword">const</span> person<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   ts知道它是一个对象，但是不知道内部情况。  <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token keyword">const</span> person<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>  firstName <span class="token operator">:</span> <span class="token string">"choi"</span><span class="token punctuation">,</span>  lastName<span class="token operator">:</span> <span class="token string">"hot"</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token comment">//会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Interface-Class"><a href="#Interface-Class" class="headerlink" title="Interface, Class"></a>Interface, Class</h4><ul><li><strong>Interface面对对象接口：</strong></li><li>接口就相当于一份说明书，类的实现都要按照这份说明书来。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">drawPoint</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">point</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token operator">:</span> point<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token operator">:</span>point<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//这个时候没有对point进行类型限制，所以可以随便传参，会导致代码和业务逻辑都出错。</span><span class="token comment">//后面两行代码并不会报错。</span><span class="token function">drawPoint</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token number">105</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">drawPoint</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token string">"choi"</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token string">"hot"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">drawPoint</span><span class="token punctuation">(</span><span class="token punctuation">{</span>weather<span class="token operator">:</span> <span class="token string">"干燥"</span><span class="token punctuation">,</span> temperature<span class="token operator">:</span><span class="token string">"5oC"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//所以要创建interface接口对point进行类型限制。</span>    <span class="token keyword">interface</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>      x<span class="token operator">:</span> number<span class="token punctuation">;</span>      y<span class="token operator">:</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//将最上面的代码改为：</span><span class="token keyword">let</span> <span class="token function-variable function">drawPoint</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">point：Point</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token operator">:</span> point<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token operator">:</span>point<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//这时候刚才没报错的两行代码就会报错了。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>因为有对象就会引出了“高内聚，低耦合”的问题。上面的代码中的drawPoint和Point这个对象高度相关，应该用面对对象的思维来解决，不然写的代码都是低内聚的。</li><li>把所有相关的属性和方法都打包在一个集合中，就是Class。</li></ul><ul><li><p><strong>Class类</strong></p></li><li><p>对class的理解：</p><ul><li>封装：对具体细节具体过程的隐藏。<br><img src="https://choichoi-1310042158.cos.ap-singapore.myqcloud.com/20220407152610.png" alt="20220407152610"></li></ul></li><li><p>重写上面的drawPoint代码:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">IPoint</span><span class="token punctuation">{</span>  x<span class="token operator">:</span> number<span class="token punctuation">;</span>  y<span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token function-variable function">drawPoint</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">//打印坐标点信息</span>  <span class="token function-variable function">getDistances</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token operator">:</span>IPoint</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number<span class="token punctuation">;</span> <span class="token comment">//需要传入对方坐标点信息</span><span class="token punctuation">}</span><span class="token comment">//需要实现IPoint中所有的成员变量和成员方法。</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token keyword">implements</span> <span class="token class-name">IPoint</span><span class="token punctuation">{</span>  x<span class="token operator">:</span> number<span class="token punctuation">;</span>   y<span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token function-variable function">drawPoint</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x: "</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token string">" y: "</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function-variable function">getDistances</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token operator">:</span> IPoint</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>y<span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> point<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>point<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">--</span><span class="token operator">&gt;</span>point<span class="token punctuation">.</span><span class="token function">drawPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>类class就是Point，对象就是这个class Point 的实例。也就是说使用new实例化以后就产生了一个对象。对象也被称作实例，instance。</p></li><li><p>运行drawPoint的时候报错，因为x,y没有初始化。可以直接赋值。</p><ul><li>但更好的方法是<strong>使用构造函数 constructor</strong>。</li><li>改写上述代码：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token keyword">implements</span> <span class="token class-name">IPoint</span><span class="token punctuation">{</span>x<span class="token operator">:</span> number<span class="token punctuation">;</span> y<span class="token operator">:</span> number<span class="token punctuation">;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> number<span class="token punctuation">,</span> y<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function-variable function">drawPoint</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x: "</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token string">" y: "</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function-variable function">getDistances</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token operator">:</span> IPoint</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>y<span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过构造函数，在Point对象初始化的时候就可以给x,y赋值了。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>那么如果在实例化的时候并不知道具体需要赋值多少，或者不想赋值怎么办？</p><ul><li><strong>加一个问号 ? ，变成可选参数。</strong></li><li>或者<strong>给参数一个默认值</strong>。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span> y<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">2</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>注意：JS构造函数不可以重载，一个类有且仅有一个constructor。</li><li>上面的赋值方法较为繁琐，于是引入了接下来的访问修饰符的概念。</li></ul></li></ul></li></ul></li></ul><h4 id="Access-Modifier"><a href="#Access-Modifier" class="headerlink" title="Access Modifier"></a>Access Modifier</h4><ul><li><p>访问修饰符分为public, private, protected.</p></li><li><p>一般默认的成员变量都是public</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  利用<span class="token keyword">public</span>改写上面的代码<span class="token operator">:</span>  不需要在这里声明x<span class="token punctuation">,</span>y的类型。  不能再使用<span class="token string">"?"</span>做可选参数。  不需要再用<span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x进行赋值。 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token keyword">implements</span> <span class="token class-name">IPoint</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> x<span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token keyword">public</span> y<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">2</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//但是public方法下，依旧可以重新赋值，在实际工作中是非常危险的。</span>point<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>point<span class="token punctuation">.</span>y <span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>所以可以使用private，把公有变成私有，就能让外部无法访问。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token keyword">implements</span> <span class="token class-name">IPoint</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">private</span> x<span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token keyword">private</span> y<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">2</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment">//这时候尝试使用point.x = 30进行修改则会报错。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>但是又会出现新的问题，private会导致和IPoint接口声明的成员不一致。<strong>接口的成员变量都默认为public</strong>。设置为private会导致Point类报错。</p><ul><li>最直接的解决方式是<strong>在IPoint接口中直接删除x,y这两个公有变量。</strong></li><li>考虑到有从外部访问成员变量的需要，要用<strong>getter，setter</strong>这两个方法。比如getDistances函数就需要访问x,y。<ul><li><strong>getter,setter: 把class的私有属性封装一下，让外部通过特定的方法(getter,setter)进行访问。</strong><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//setter作用就是在内部和外部建立一个缓冲带。</span><span class="token function-variable function">setX</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"value 不能小于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span>point<span class="token punctuation">.</span><span class="token function">setX</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//point.setX(-9);//运行时会提示错误。</span><span class="token comment">//间接获取class Point中的横坐标</span><span class="token function-variable function">getX</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同理可以对纵坐标进行getter，setter的设置。</span><span class="token function-variable function">setY</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token function-variable function">getY</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//同时需要在IPoint接口添加getter，setter。</span><span class="token keyword">interface</span> <span class="token class-name">IPoint</span><span class="token punctuation">{</span>  <span class="token function-variable function">drawPoint</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">//打印坐标点信息</span>  <span class="token function-variable function">getDistances</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token operator">:</span>IPoint</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number<span class="token punctuation">;</span> <span class="token comment">//需要传入对方坐标点信息</span>  <span class="token function-variable function">getX</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number  <span class="token function-variable function">getY</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number  <span class="token function-variable function">setX</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>  <span class="token function-variable function">setY</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">}</span><span class="token comment">//现在就可以用 getter, setter来让getDistances访问x,y的值了</span>  <span class="token function-variable function">getDistances</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token operator">:</span> IPoint</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>ts还提供了<strong>getter,setter懒人包</strong>:<ul><li>时刻注意要<strong>大写</strong></li><li>使用懒人包至少需要target为ES5或者更高版本。</li><li>设置编译器版本：<code> tsc -t es5 [需要编译的文件名.ts]</code><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token comment">//改写上述setX = () =&gt;{...}</span>  <span class="token keyword">set</span> <span class="token constant">X</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>  <span class="token keyword">get</span> <span class="token constant">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>  <span class="token comment">//使用：如果需要赋值直接使用大写的X</span>  point<span class="token punctuation">.</span><span class="token constant">X</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span><span class="token constant">X</span><span class="token punctuation">)</span>  <span class="token comment">//但是使用懒人包也需要在IPoint接口中定义：</span>  <span class="token comment">//直接使用大写的X进行定义：</span>  <span class="token keyword">interface</span> <span class="token class-name">IPoint</span><span class="token punctuation">{</span>    <span class="token function-variable function">drawPoint</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">//打印坐标点信息</span>    <span class="token function-variable function">getDistances</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token operator">:</span>IPoint</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number<span class="token punctuation">;</span> <span class="token comment">//需要传入对方坐标点信息</span>    <span class="token constant">X</span><span class="token operator">:</span> number    <span class="token constant">Y</span><span class="token operator">:</span> number<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h4 id="Generic"><a href="#Generic" class="headerlink" title="Generic"></a>Generic</h4><ul><li><p><strong>Generic泛型</strong></p></li><li><p>考虑到<strong>可重用性</strong>，不仅支持当前的数据类型，也支持未来的数据类型而存在。</p></li><li><p>使用一个identity函数做例子:</p><ul><li><p>不用泛型的话:<code>function identity(arg: number): number { return arg; }</code></p></li><li><p>使用Any的话:<code>function identity(arg: any): any { return arg; }</code> </p></li><li><p>但是使用Any我们只能知道有任意类型的数据被传入和返回。<strong>并不能绑定和追踪两个值的类型。</strong></p></li><li><p>所以使用泛型: <code>function identity&lt;T&gt;(arg: T): T { return arg; }</code></p></li></ul></li><li><p><strong>泛型是可以帮助捕获用户传入的类型，同时使用这个类型当做返回值的类型。</strong></p></li><li><p>同样是声明数字数组: </p><ul><li>普通声明：<code> let list1: number[] = [1,2,3,4]</code></li><li>泛型声明：<code> let list2: Array&lt;number&gt; = [1,2,3,4]</code></li></ul></li><li><p>使用例子:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//返回数组最后一位元素</span><span class="token keyword">let</span> lastInArray <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment">//会识别l1类型为number</span><span class="token keyword">const</span> l1 <span class="token operator">=</span> <span class="token function">lastInArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会识别l2类型为string</span><span class="token keyword">const</span> l2 <span class="token operator">=</span> <span class="token function">lastInArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因为有指定类型，所以l3的类型为string | number的数组</span><span class="token keyword">const</span> l3 <span class="token operator">=</span> lastInArray<span class="token operator">&lt;</span>string <span class="token operator">|</span> number<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//也可以传入一个默认类型参数</span><span class="token keyword">let</span> makeTuple <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">Y</span> <span class="token operator">=</span> number<span class="token operator">&gt;</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token constant">Y</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&gt;</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token comment">//帮我们动态匹配类型，v1识别为 string | number 的元祖类型</span><span class="token keyword">const</span> v1 <span class="token operator">=</span> <span class="token function">makeTuple</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">)</span><span class="token comment">//v2显式定义了类型，因为默认参数是number，就可以省略第二个参数</span><span class="token keyword">const</span> v2 <span class="token operator">=</span> makeTuple<span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode+腾讯云+PicGo图床</title>
      <link href="/2022/04/05/teng-xun-yun-typora-pei-zhi/"/>
      <url>/2022/04/05/teng-xun-yun-typora-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="vscode-腾讯云-PicGo图床"><a href="#vscode-腾讯云-PicGo图床" class="headerlink" title="vscode+腾讯云+PicGo图床"></a>vscode+腾讯云+PicGo图床</h1><p><strong>1. 配置腾讯云COS存储桶</strong></p><ul><li>做图床的话，访问权限要选”公有读私有写“。<br><img src="https://choichoi-1310042158.cos.ap-singapore.myqcloud.com/20220405011149.png"></li></ul><p><strong>2. 配置密钥</strong></p><ul><li>使用PicGo做插件的话要配置一个密钥让插件使用。</li><li>密钥配置网址：<a href="https://console.cloud.tencent.com/cam/capi">https://console.cloud.tencent.com/cam/capi</a>  </li><li>配置好的密钥：<br><img src="https://choichoi-1310042158.cos.ap-singapore.myqcloud.com/20220405013142.png"></li></ul><p><strong>3. PicGo插件</strong></p><ul><li>在vscode安装PicGo插件。<br><img src="https://choichoi-1310042158.cos.ap-singapore.myqcloud.com/20220405011640.png"></li></ul><p><strong>4. 配置PicGo</strong></p><ul><li>找到PicGo的设置， 主要配置如下：</li><li>Picgo › Pic Bed: Current，选择”tcyun”，即腾讯云。<br><img src="https://choichoi-1310042158.cos.ap-singapore.myqcloud.com/20220405012031.png"></li><li>Picgo › Pic Bed › Tcyun: App ID，设置为腾讯云的APPID，是第二步的一串数字。</li><li>Picgo › Pic Bed › Tcyun: Area，腾讯云的存储桶所在区域，在创建存储桶时提供，如“ap-singapore”。</li><li>Picgo › Pic Bed › Tcyun: Bucket，存储桶的名称，一般是桶名 + “-” + 一串数字，如“test-1310232109“。</li><li>Picgo › Pic Bed › Tcyun: Custom Url，访问域名，直接填请求域名，如”<a href="https://test-1310232109.cos.ap-singapore.myqcloud.com&quot;/">https://test-1310232109.cos.ap-singapore.myqcloud.com"</a></li><li>Picgo › Pic Bed › Tcyun: Secret ID，在上面第二步生成。</li><li>Picgo › Pic Bed › Tcyun: Secret Key，在上面第二步生成。</li><li>Picgo › Pic Bed › Tcyun: Version，使用默认的 v5 就可以。  </li></ul><p><strong>5. 上传方法</strong></p><ul><li>Mac可以把要上传的图片先复制在剪贴板，然后在要插入的地方使用快捷键Command + Option + U。</li><li>Windows可以用Ctrl + Alt + U。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于垃圾回收，内存管理，内存泄漏。</title>
      <link href="/2022/04/04/guan-yu-nei-cun-xie-lou/"/>
      <url>/2022/04/04/guan-yu-nei-cun-xie-lou/</url>
      
        <content type="html"><![CDATA[<p>（还没写完，先留着。刚配置完图床。）</p><h1 id="关于垃圾回收、内存管理、内存泄漏。"><a href="#关于垃圾回收、内存管理、内存泄漏。" class="headerlink" title="关于垃圾回收、内存管理、内存泄漏。"></a>关于垃圾回收、内存管理、内存泄漏。</h1><ul><li>这篇文章主要还是因为面试被问到了内存泄漏。在红宝书上看到过但没有仔细研究。接下来重温红宝书。</li></ul><h2 id="垃圾回收（GC）"><a href="#垃圾回收（GC）" class="headerlink" title="垃圾回收（GC）"></a>垃圾回收（GC）</h2><ul><li>垃圾回收（GC）即Garbage Collection。程序运行过程中会产生许多”垃圾”，</li></ul><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h2 id="内存泄漏是什么？"><a href="#内存泄漏是什么？" class="headerlink" title="内存泄漏是什么？"></a>内存泄漏是什么？</h2><ul><li>个人的理解是，电脑分配给浏览器(或者任何runtime)的内存不够用来跑自己写的<del>垃圾</del>代码了。<del>JS运行占的内存满得都溢出来了。</del><ul><li>比如函数被调用很多次，或者写一个千万级别的循环就会导致浏览器非常卡，甚至造成崩溃。</li><li>特别是内存不够多的设备上，内存没办法分配给浏览器很多，这时候也会有内存泄漏的问题。</li></ul></li></ul><h2 id="怎么导致的？"><a href="#怎么导致的？" class="headerlink" title="怎么导致的？"></a>怎么导致的？</h2><h3 id="意外声明全局变量"><a href="#意外声明全局变量" class="headerlink" title="意外声明全局变量"></a>意外声明全局变量</h3><ul><li>是最常见也是最容易修复的内存泄漏问题。</li><li></li></ul><ul><li> 参考：<a href="https://juejin.cn/post/6981588276356317214">https://juejin.cn/post/6981588276356317214</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/06/hello-world/"/>
      <url>/2021/12/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
